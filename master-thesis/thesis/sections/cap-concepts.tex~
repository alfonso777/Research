\chapter{Conceitos Básicos}
\label{cap:concepts}



%----------- Serviços Web-------------%
%-------------------------------------%
\section{Serviços Web}
\label{sec:objectives}

Os serviços Web foram  propostos para facilitar a comunicação entre componentes de arquiteturas heterogêneas, oferecendo uma
 visão destas arquiteturas baseada em serviços e totalmente compatível com a Internet. O surgimento dos serviços Web, e da  SOA, %\cite{Huhns2005}
 implicaram o estabelecimento de novos mecanismos de B2B, B2C e
B2E.  A organização responsável pela definição dessas normativas ou padrões %, e garantir esse comportamento,
 é o WS-I~\cite{wsi2005}(\textit{Web Services Interoperability Organization}). Esta organização possibilita
 que os sistemas desenvolvidos em diferentes plataformas e diferentes linguagens de programação possam interagir. 

% A SOA tem por objetivo estender a ideia de serviço Web, de modo que uma invocação, totalmente
 %transparente para o usuário, implique a execução de mais de um ou mais serviços Web.

\begin{comment}
  A seguir algumas definições de serviço Web: 
  \begin{itemize}
  \item Uma aplicação modular que se descreve a si mesma, que pode ser publicada, localizada, invocada e usada em qualquer lugar na Web, que esteja
  baseada em padrões abertos como XML, UDDI~\cite{UDDI2005}, SOAP ou WSDL~\cite{Newcomer2002}. 
    %\item  Uma aplicação acessível a outras aplicações através da Internet \cite{Pelechano2005}. 
    \item  Um sistema de software identificado por uma URI (\emph{Uniform Resource Identifier}), cujas interfaces públicas e as ligações são definidas
  e descritas usando XML. Sua definição pode ser descoberta por outros sistemas de software. Estes sistemas podem interagir com o serviço Web na forma prescrita pela sua definição, usando mensagens baseadas em XML através de protocolos e padrões da Internet \cite{W3C_WSArchitecture2004a} \cite{W3C_WSArchitectureUS2004}. 
    \item  Uma interface que descreve um conjunto de operações, acessível através da rede utilizando mensagens baseados no padrão XML~\cite{IBMWS2006}. 
    \item  Qualquer aplicação acessível via HTTP/HTTPS, com a qual se pode interagir através de mensagens SOAP, registrado em um registro(valha a redundância) UDDI
  e tem uma descrição WSDL~\cite{HPWS2006}. 
    \item  Um provedor de informação ou capacidades, expostas em uma rede através de interfaces, protocolos consistentes e padrões~\cite{MIcrosoftWS2006}. 
  \end{itemize}
\end{comment}
 


O modelo de serviços Web acrescenta o desenvolvimento de aplicações distribuídas. A arquitetura de serviços Web permite que os serviços
 sejam descritos de forma dinâmica, publicados, descobertos e invocados em um ambiente de
 computação distribuída, utilizando os padrões WSDL\footnote{WSDL : \url{http://www.w3.org/TR/wsdl}}, 
UDDI\footnote{UDDI: \url{http://uddi.xml.org/}}, SOAP\footnote{ SOAP:\url{www.w3.org/TR/soap/}} e XML, respectivamente. 
%\subsection{Descrição dos Serviços Web}
Segundo~\cite{Newcomer2002}, os serviços Web representam o próximo passo na evolução da tecnologia orientada a objetos
 e representam uma revolução, afastando-se da tradicional arquitetura cliente-servidor para as novas arquiteturas
 ponto a ponto. 

Os serviços Web estão baseados em um conjunto de normativas (WSDL, UDDI, XML e SOAP) que permite aos
programadores implementarem aplicações distribuídas. %, usando muitas ferramentas diferentes para criar aplicativos que usam uma combinação
%de módulos de software, que são chamados desde diversos sistemas que se encontram distribuídos em diferentes regiões geográficas. 
Assim, os serviços Web são aplicações auto-contidas e modulares que podem ser: 

\begin{itemize}
 \item Descritas por uma linguagem de descrição de serviços, como a linguagem WSDL. 
 \item Publicadas, incluindo as descrições e as políticas de uso em um registro conhecido, utilizando o método de registro UDDI.
 \item Descobertas, também usando o padrão UDDI, para enviar  requisições para o registro e receber os detalhes necessários para a
localização e ligação (\textit{binding}) do serviço que atenda os parâmetros de busca.
 \item Associadas, quando as informações contidas na descrição do serviço são utilizadas  para criar uma instância do serviço disponível. % (ou \textit{proxy}). 
 \item Invocadas sobre a  rede, utilizando as informações contidas nos detalhes da descrição do serviço, em um documento WSDL. Durante a invocação se utiliza o protocolo SOAP. 
 \item Composta com outros serviços para integrar novas aplicações e serviços, o que é a base da SOA.

\end{itemize}


A Figura~\ref{fig:WS_Triangle} mostra e ilustra os componentes que estão envolvidos no modelo de uma  arquitetura de serviços Web. A 
seguir a descrição desses elementos~\cite{Tortosa2006}:
 
\begin{itemize}
  \item\textbf{Serviço}: A ``aplicação'' publicada para ser utilizada pelos solicitantes que cumpram os requisitos especificados
  pelo provedor de serviços. Obviamente, a execução é realizada em uma plataforma acessível na rede. %O serviço é descrito
  %através da linguagem de descrição de serviço, por exemplo WSDL. Essa descrição e as políticas de uso foram previamente publicados em um registro.
  \item\textbf{Provedor do serviço}: Do ponto de vista comercial, é quem fornece o serviço. Do ponto de vista da arquitetura, é a plataforma que fornece o serviço. 
  \item\textbf{Registro de serviços }: É um repositório de descrições, em que os provedores publicam seus serviços e as formas de acessá-los. Também
permite aos solicitantes realizarem diferentes tipos de buscas. %, obtendo deles os elementos necessários para localizá-los e usá-los. 
  \item\textbf{Solicitante do serviço}: Do ponto de vista comercial, é a empresa que precisa de um determinado serviço. Do ponto de vista da arquitetura, é
 o aplicativo cliente que invoca um serviço de busca.                                                                                                                                                                                              
\end{itemize}


    \begin{figure}[!h]
      \centering
      \includegraphics[width=.80\textwidth]{figures/SOA-Triangle.png}
      \caption{Modelo da arquitetura de serviços Web}
      \label{fig:WS_Triangle}
    \end{figure}


As operações que podem ser realizadas com os serviços Web são: 
\begin{itemize}
  \item \textbf{Publicar/Cancelar}: Um provedor de serviços pode publicar um determinado serviço comercial (\textit{e-business}) em um ou mais registros de serviços
 e cancelar essa publicação em qualquer momento. 
  \item \textbf{Procurar}: Os  solicitantes dos serviços (clientes) podem interagir com um ou mais registros para encontrar um conjunto de serviços
 %com os quais possam interagir para encontrar soluções para seus problemas. 
 que solucione seus problemas. 
  
  \item \textbf{Ligação (\textit{binding})}: Os solicitantes  negociam com os provedores de serviços a forma de  acesso e invocação dos seus
   serviços comerciais. 
\end{itemize}


Atualmente, as aplicações que estão sendo desenvolvidas têm a capacidade de procurar  e selecionar serviços de forma dinâmica em tempo real, com base
 em parâmetros como custos, qualidade ou disponibilidade. Isto é uma grande vantagem na hora de utilizar sistemas baseados em  serviços Web, já que
 o sistema automaticamente escolhe o serviço que melhor se adapte às suas necessidades ~\cite{Wang2004}.% e, portanto, o desempenho do sistema será acrescentado \cite{Wang2004}. 

Entre as razões pelas quais os serviços Web possuem um papel importante na implementação de sistemas distribuídos estão~\cite{Tortosa2006}: 
\begin{itemize}
  \item \textbf{Interoperabilidade:} Qualquer serviço Web pode interagir com qualquer outro serviço. O protocolo padrão SOAP permite que qualquer serviço
possa ser oferecido ou utilizado independentemente da linguagem ou ambiente em que é desenvolvido. 
  \item  \textbf{Onipresença:} Os serviços Web se comunicam usando HTTP e XML. Qualquer dispositivo que trabalha com estas tecnologias pode ser
o cliente e acessar os serviços Web. Por exemplo, uma máquina de venda de refrigerantes pode se comunicar com o serviço Web de um provedor local
 e solicitar uma ordem de fornecimento através de uma rede de acesso sem fio. 
  \item \textbf{Barreira mínima de participação:} Os conceitos por trás dos serviços Web são fáceis de compreender e existe uma gama de ferramentas de desenvolvimento
, como os oferecidos pela IBM, \textit{Sun Microsystems}, \textit{Apache}, \textit{Systinet}, entre outras. Todos eles permitem que os
desenvolvedores criem e implementem rapidamente serviços Web. 
  \item \textbf{Suporte da indústria:} As principais empresas de TI suportam os serviços Web baseados em SOAP, e serviços Web baseados na arquitetura 
  REST \footnote{REST: \emph{Representational State Transfer}}, conhecidos como serviços Web \textit{RESTFul}  ~\cite{Peng2009}, e tecnologias derivadas dos serviços Web.                                                                                                                      
\end{itemize}


\begin{comment}
\subsection{Desafios que abordam os Serviços web }
Para que os  serviços Web tenham sucesso, requerem superar alguns desafios técnicos, entre os quais se destacam os seguintes~\cite{Tortosa2006}: 

\begin{itemize}
  \item \textbf{Descoberta:} Como um serviço Web é anunciado para ser descoberto por outros serviços?. O que acontece se o serviço for modificado ou alterado após
ter sido anunciado?. Há dois padrões que são concebidos para fazer isso, por um lado WSDL e por outro lado UDDI. Mas o que acontece quando um serviço já está registrado,
 e mudou a sua localização (endereço IP, por exemplo)?. É necessário modificar o registro?, a resposta a esta pergunta é sim. Um dos maiores problemas desta arquitetura é
a necessidade de regerar o documento WSDL ante as mudanças das localizações de serviços. Entanto, existem inúmeras ferramentas no mercado que geram estes documento
 automaticamente, mas este é um dos pontos fracos desta tecnologia. 
  \item \textbf{Confiabilidade:} Obviamente, alguns sistemas de serviços da Web são mais confiáveis do que os outros. Como essa confiabilidade pode ser medida e comunicada?.
 O que acontece quando um provedor de serviços temporariamente fica inutilizável?. Como é que se localiza ou utiliza um serviço alternativo de outra empresa, ou os clientes
 terão que esperar até que o provedor esteja novamente habilitado?. Como saber em qual outra empresa poder confiar?. Atualmente existem algumas ferramentas no mercado
 especificamente concebidas para medir a qualidade dos serviços Web~\cite{Scholten2009}, mas ainda é necessária uma padronização sobre esta questão. Os resultados sobre a qualidade
de diferentes serviços Web servem como parâmetro de comparação para  ajudar ao consumidor na escolha de um serviço ou outro. Na Figura~\ref{fig:stack_QoS}
mostra-se a pilha de padrões, que oferecem os mecanismos de confiabilidade e qualidade de serviço (QoS): 


    \begin{figure}[!h]
      \centering
      \includegraphics[width=.80\textwidth]{figures/webServicesStackQoS.png}
      \caption{A pilha de tecnologias para garantir a QoS \cite{WSQoS2003}}
      \label{fig:stack_QoS}
    \end{figure}


  \item \textbf{Segurança:} Alguns serviços Web são acessíveis ao público e com pouca segurança, mas a maioria dos serviços comerciais usam comunicações encriptadas
 com autenticação.O protocolo HTTP sobre SSL fornece uma segurança básica, mas os serviços individuais exigem um maior nível de especificidade. Como
um serviço Web autentica os usuários? Como é que um serviço distingue os níveis de privilégios entre os diversos usuários?. Hoje, isso é um dos pontos fortes desta
 tecnologia. Além disso já existem protocolos para garantir a segurança das comunicações através de serviços Web. 

  \item \textbf{Transações:} Os sistemas de transações tradicionais usam um método de compromisso em duas fases: primeiro se recuperam todos os recursos
 dos participantes e se garantem estes recursos até completar a transação, quando a transação é concluída, os recursos são liberados. Este método pode funcionar bem em
 ambientes fechados para transações de curta duração, mas não em um ambiente aberto, onde as transações podem levar horas ou mesmo dias, isto é, de longa duração(\emph{long-running}). 

  \item \textbf{Administração:} Quais tipos de mecanismos são necessários para gerenciar um sistema altamente distribuído?. É possível delegar a gestão de alguns
 serviços Web para outros? Sim, como foi discutido acima, a tendência dos desenvolvimentos orientados a serviços é que eles possam se comunicar com os outros e
 completar a funcionalidade requerida, obviamente, de uma maneira transparente para o usuário, por tanto seria válido esse tipo de delegação de administração.


 \item Contabilidade: Como você define quanto tempo um usuário pode acessar e executar um serviço Web?. Como se faz a cobrança dos serviços da Web?.
Como se comercializa o serviço, sob subscrição ou pagar-para-ver (\textit{pay-per-view})?. Para a comercialização e cobrança dos serviços Web existem um conjunto de tecnologias associadas
que resolvem o problema, tais como: preço por serviço(\emph{"Pricing Port Type"}), provedor do  serviço de pagamento (\emph{Payment Service Provider}) 
e \textbf{WS-Agreement} (uma especificação da política de contrato). 

  \item Teste: Como depurar um serviço Web que vem de diferentes empresas, que está hospedado em diferentes ambientes e sistemas operacionais ?. 
\end{itemize}
\end{comment}


\begin{comment}
Isso apresenta
 um problema difícil de superar, mas na verdade existem sistemas que têm resolvido esses problemas. Dois exemplos são, a sociedade humana e os
 organismos biológicos. Ambos os sistemas têm as seguintes propriedades: 
Fault Tolerant
 massa Paralela.
Distribuído
- Propriedades organizado.
- Auto-cura
- design em camadas.
- Design de componentes simples.
\end{comment}


%\subsection{Serviços Web RestFul}
\subsection{Padrões e tecnologias básicos}
A infra-estrutura mínima exigida pelos serviços  Web pode ser definida em termos de~\cite{Pelechano2005}: 
\begin{itemize}
  \item O que vai na "rede": Formatos e protocolos de comunicação. 
  \item O que descreve e vai na rede: Linguagens de descrição de serviços. 
  \item O que permite encontrar e armazenar essas descrições: Descoberta de serviços. 
\end{itemize}

Os serviços Web baseiam o seu desempenho global e as características nas seguintes  normativas e protocolos~\cite{WSAlonso2004}: 

\begin{itemize}
  \item \textbf{XML} (\emph{eXtensible Markup Language})~\cite{W3CXML1998}, publicado em 1998 e tem revolucionado a maneira de estruturar, descrever e
 trocar informação. Independentemente
 das muitas maneiras atuais de usar XML, todos as tecnologias de serviços Web são baseados em XML.É a padrão central desta arquitetura, sobre a qual o resto de padrões
 se apoiam. O desenho de XML deriva de duas fontes principais: SGML (\emph{Standard Generalized Markup Language})~\cite{ISOSGML1986} e
 HTML(\emph{HyperText Markup Language})~\cite{ISOHTML2000}.
 
  \item \textbf{UDDI} (\emph{Universal Description, Discovery and Integration})~\cite{UDDI2005}, é um diretório que contém um registro/repositório de
 descrições de serviços Web. Este
 padrão permite que as empresas se registrem em um tipo de diretório da Internet, que as ajuda a anunciar seus serviços, de modo que outras empresas possam
localizar os seus serviços e realizar transações na web. O processo de registro e consulta se realizam usando os mecanismos baseados em XML e HTTP(S). Portanto, a
 especificação UDDI tem dois objetivos principais, primeiro, servir de suporte aos desenvolvedores para encontrar informações sobre os serviços  Web e poder construir
os clientes; e por outro lado, facilitando a ligação dinâmica de serviços Web, permitindo consultar referências e acessar serviços de interesse. 

  \item \textbf{SOAP} (\emph{Simple Object Access Protocol})~\cite{W3CSOAP2003}, é um padrão do W3C\footnote{W3C:
   World Wide Web Consortium, \url{www.w3.org/} }, que define
  um protocolo que da suporte para a interação (dados + funcionalidade)  entre aplicações em ambientes heterogêneos distribuídos, é interoperável
 (independente da plataforma, linguagem de programação, independente do hardware e  protocolos). SOAP define a forma de organizar informações XML de uma forma estruturada e
 tipada para ser trocada entre diferentes sistemas. O protocolo SOAP simplifica
 o acesso a objetos, permitindo que as aplicações possam invocar métodos de objetos ou funções que residem  em sistemas remotos. 

  \item \textbf{WSDL}(Web Service Description Language)~\cite{W3CWSDL2001}, criado originalmente pela IBM, Microsoft e Ariba. Tem um papel e um propósito semelhante a IDL 
(\emph{Interface Definition Language}) das plataformas de \textit{middleware}. Um arquivo WSDL é um documento XML que descreve os serviços Web, particularmente suas
 interfaces. Uma  característica que o diferencia do IDL, é que o WSDL deve definir os mecanismos de acesso (protocolos) para os serviços web. Outra
característica distintiva é a  necessidade de definir (na especificação) a localização  de um serviço (\emph{endpoints}). A separação das interfaces e os enlaces de
 protocolo, e a necessidade para incluir as informações de localização permite a definição de especificações modulares. WSDL permite definir interfaces de
 forma mais complexa e expressiva, permitindo definições de interações  assíncronas e de diferentes paradigmas de interação, e a possibilidade de misturar ou
 ou agrupar operações.
\end{itemize}

Na Figura \ref{fig:WS_model} se mostra o diagrama de arquitetura dos sistemas baseados em serviços Web, onde se representam os padrões e tecnologias descritas. 
    \begin{figure}[!h]
      \centering
      \includegraphics[width=.40\textwidth]{figures/webServiceModel.png}
      \caption{ Modelo integral dos serviços Web~\cite{Pelechano2005}}
      \label{fig:WS_model}
    \end{figure}






%%--- comment ----
\begin{comment}
\subsection{Atualidade e Perspectiva Futura}
Segundo \cite{Pelechano2005}, os serviços Web  e SOA \emph{``prometem muito para integração de aplicações universais''}, mas agora esta afirmação ainda é vaga, porque
  observando o estado atual (\cite{SOAChallenges2009} e \cite{PapazoglouSOC2007a}), encontram-se alguns vazios em termos de confiabilidade, segurança, orquestração, suporte a sistemas legados na  semântica. Em geral, os serviços Web são úteis para as necessidades simples, como a obtenção de informações de sites,
mas as aplicações críticas e
complexas exigem novos padrões ainda em desenvolvimento e processo de amadurecimento \cite{PapazoglouSOC2007a}. 

Na definição  de padrões, existem principalmente dois grupos implicados no escopo dos serviços da Web, que são citados ao longo do do documento: 
\begin{itemize}
  \item \emph{World Wide Web Consortium} (W3C).
  \item \emph{Organization for the Advancement of Structured Information Standards} (OASIS). 

\end{itemize}

Esses  padrões, extensões e protocolos estão sendo propostos no âmbito de uma estrutura modular que permita aos desenvolvedores usar apenas os aspectos necessários para seus  serviços Web. Não existe uma proposta padrão para a pilha de protocolos, mas uma das mais atualizadas, segundo \cite{Wilkes2005}, é
 apresentada na Figura \ref{fig:wsStack}. 

    \begin{figure}[!h]
      \centering
      \includegraphics[width=.70\textwidth]{figures/webServicesStack.png}
      \caption{Pilha de protocolos para os serviços Web \cite{Wilkes2005}}
      \label{fig:wsStack}
    \end{figure}


Dentre destes protocolos de padrões destacam-se alguns muito necessários para a implementação total dos serviços Web: 
\begin{itemize}
  \item \textbf{Confiabilidade no envio de  mensagens}: WS-ReliableMessaging, WS-CCE, WS-Addressing.
  \item \textbf{Segurança}: o WS-Security ratificado pela OASIS e WS-I \cite{wsi2005}, SAML, WS-Policy, WS-SecurityPolicy, WS-Trust, WS-SecureConversation.
  \item \textbf{Orquestração}:  BPEL complementada com o WS-Transaction, WS-Coordination, WS-Choreography e WS-CAF, desenhados  para  facilitar
 a implementação das transações e processos de negócios complexos. 
  \item \textbf{Coreografia}:
\end{itemize}


O grau de consenso da indústria no escopo dos protocolos dos serviços Web é elevado (pelo menos em termos de infra-estrutura básica). Apesar de
 propostas alternativas que têm sido desenvolvidas em algumas áreas, a formação de grupos de trabalho no W3C ou OASIS, muitas vezes levam  à convergência de todas as partes interessadas. 

Existem atualmente algumas áreas onde se mantêm propostas alternativas, por exemplo, \emph{Reliable Messaging}, Orquestração e coordenação de transações. Essas alternativas
 têm sido refletidas por grupos de empresas como a IBM/Microsoft por um lado, e Sun/Oracle por outro lado \cite{WSAlonso2004}. 

No entanto, desde 2004, a Microsoft e a Sun começaram uma aproximação e uma maior cooperação no campo dos serviços Web. Um exemplo desta situação foi que a Sun se
 juntou a BEA, IBM, Microsoft e SAP AG para propor  a última versão do WS-Addressing do W3C \cite{W3C_WS-Adressing2004}. O mesmo aconteceu com as especificações, como
 o WS-MessageDelivery \cite{W3C_WS-MessageDelivery2004}, com a atualização de WS-Eventing \cite{W3CWS-Eventing2006},  permitindo a interoperabilidade com as
especificações, como o WS-Notification \cite{IBMWS-Notification2004}. Tais movimentos pressagiaram uma colaboração em áreas como a coordenação, transações e coreografia. 


Também tem existido uma  sobreposição entre os serviços Web e a iniciativa ebXML \cite{OASISebXML2005}, que utiliza SOAP na camada de transporte, mas tem seu próprio
 registro e orquestração. Embora \textbf{\emph{ebXML}} é um padrão aprovado e robusto, sua aplicabilidade é menor do que os serviços Web do W3C. É considerado uma
 evolução do EDI\footnote{EDI:Electronic Data Interchange}(Intercâmbio Eletrônico de Dados), cujo objetivo principal está no escopo dos  negócios eletrônicos B2B(\emph{Business to Business}).
Os serviços Web estão projetados para suportar um maior número de requisitos e cenários de uso, de modo que \emph{ebXML} está evoluindo para adotar
 protocolos adicionais dos serviços Web quando estes madurem e sejam testados \cite{Scholten2009}.
 Parte do trabalho do grupo \emph{ebSOA} de OASIS \cite{OASISebSOA2005} é evoluir a arquitetura de  \emph{ebXML} e conduzir a transição para a adoção de mais  protocolos baseados em serviços Web que usem padrões do W3C. 


WS-I (\emph{Web Services Interoperability}) é um grupo da indústria aberta que foi criado em 2002 para promover a interoperabilidade de serviços Web entre diversas
  plataformas, sistemas operacionais e linguagens de programação \cite{wsi2005}. Na Figura \ref{fig:ws_standards_WS-I} se mostram os padrões que o WS-I trabalha. WS-I
tem um papel muito importante  no fornecimento de soluções para algumas das seguintes questões: 

  \begin{figure}[!h]
      \centering
      \includegraphics[width=.60\textwidth]{figures/WebServicesStack_WS-I.png}
      \caption{Pilha de padrões para os serviços Web que o WS-I trabalha \cite{Wilkes2005}}%referenciar adequadamente
      \label{fig:ws_standards_WS-I}
  \end{figure}	

\begin{itemize}
  \item As especificações padrão estão sempre abertas a interpretações. WS-I fornece orientações e ferramentas para ajudar a medir o nível de fidelidade
 ou ajuste das implementações padrão e  permitir a interoperabilidade. 
  \item Dado que os padrões evoluem, é necessário compreender a diferencia entre suas versões para poder interoperar. 
  \item Publicarão-se perfis de interoperabilidade de modo a refletir os requisitos para a implementação dos padrões. 
\end{itemize}

Embora os protocolos propostos para os serviços Web tem sido uma área de trabalho muito ativa, com um rápido crescimento, a transição para padrões abertos
 é inevitavelmente mais lerda. Existem poucos protocolos que finalizaram seu processo de padronização adequadamente. Em \cite{CBDISOA2006a} pode ser achado
 o uma descrição da adoção dos protocolos apresentados. 


\end{comment}

%-------------------------------------------------------%
%-------- Computação Orientada a Serviços--------------%
%-------------------------------------------------------%
\section{Computação Orientada a Serviços}
\label{sec:objectives}

Integrar produtos de diferentes provedores e de diferentes tecnologias é uma tarefa difícil, por isso cada vez mais as aplicações estão orientadas a
 serviços. Isto pode ser visto  na Figura~\ref{fig:sw_architecture_evolution}, na qual se apresenta a evolução das arquiteturas de software,
paradigmas de programação, metodologias de desenvolvimento e também os modelos de computação tanto no hardware quanto nas redes, convergindo para 
a computação orientada a serviços (\textit{Service Oriented Computing } - SOC).

    \begin{figure}[!h]
      \centering
      \includegraphics[width=0.90\textwidth]{figures/sw_architecture_evolution_.png}
      \caption{Evolução das arquiteturas de sistemas de software ( traduzida de~\cite{Pelechano2005})}%revisar bib, melhorar imagen
      \label{fig:sw_architecture_evolution}
    \end{figure}

%A SOC utiliza serviços como blocos de construção para apoiar o desenvolvimento rápido, de baixo custo e de fácil composição
% de aplicações distribuídas.

O paradigma da SOC utiliza os serviços como blocos de construção para suportar o desenvolvimento de maneira rápida, interoperável, 
evolutiva, de baixo custo  e de fácil composição de aplicações distribuídas. Serviços são entidades computacionais
 autônomos que que podem ser utilizados independentemente da plataforma. Os serviços podem  ser descritos, publicados,
 descobertos, e dinamicamente montados para o desenvolvimento massivo de sistemas  distribuídos, interoperáveis
 e evoluíveis. Os serviços desempenham funções que podem variar de responder requisições simples para a execução
 de processos de negócios sofisticados quem  exigem relações P2P entre várias camadas  de consumidores e provedores de serviços.

Qualquer troço de código e qualquer componente de um aplicativo implantado em um sistema pode ser reutilizado e transformado
 em um serviço disponibilazado na  rede. Serviços refletem uma abordagem "orientada a serviços" na programação, com base
 na idéia de composição de  aplicativos pela descoberta e invocação de serviços disponíveis na rede  ao invés de construir
 novos aplicativos ou invocar aplicativos específicos. Os  serviços são mais frequentemente construídos  de maneira
 independente do contexto em que que são utilizados. Isso significa que o provedor e consumidor de serviços são baixamente
acoplados.


\begin{comment}
  Segundo~\cite{Papazoglou2008}, a SOC permite que os desenvolvedores  ampliem dinamicamente seu portfólio mais rapidamente do que antes, devido a:
  \begin{itemize}
    \item Criação de soluções compostas que usem os ativos de software internos da organização, incluindo informação empresarial e sistemas legados, e
    \item União  dessas soluções com componentes externos, possivelmente residentes em redes remotas.
  \end{itemize}
\end{comment}


A abordagem  "orientada a serviços"  é independente de linguagens de programação específicas ou sistemas operacionais. Isso permite que
 as organizações  exponham suas funcionalidades essenciais por meio da Internet ou de uma variedade de redes, por exemplo, cabo, UMTS,
XDSL, Bluetooth, etc usando  linguagens (baseadas em XML) e protocolos padrão, e
implementando uma interface auto-descriptiva.  Atualmente, os serviços Web  são a tecnologia mais promisoria baseada no conceito de  
SOC. A promessa visionária de SOC consiste em  construir facilmente  componentes de aplicação dentro de uma  rede de serviços
 de baixo acoplamento, a fim de que se possa criar processos de negócios dinâmicos e aplicações ágeis que cubram diversas 
organizações e plataformas de computação~\cite{Papazoglou2008}.


\begin{comment}
  \begin{figure}[!h]
    \centering
    \includegraphics[width=0.90\textwidth]{figures/SOC_roadmap.png}
    \caption{ Roteiro do SOC ~\cite{Papazoglou2008} } %revisar bib, melhorar imagen
    \label{fig:sw_architecture_evolution}
  \end{figure}
\end{comment}


%% ------ %%

%\begin{comment}
\subsection{Conceito de SOA}

A chave para concretizar a visão da SOC é a arquitetura orientada a serviços (SOA). SOA é uma maneira lógica de desenhar sistemas de software para
fornecer serviços para aplicações de usuário final ou outros serviços distribuídos em uma rede, por meio de interfaces publicadas e detectáveis (isto é,  que possam
ser descobertas) . Uma aplicação  SOA bem construída, baseada em padrões, pode fortalecer  uma organização com uma infra-estrutura flexível e com
 um ambiente de processamento. Isto por causa de um provisionamento independente,funções de aplicações reutilizáveis como serviços, e provendo uma base
 robusta para alavancar esses serviços~\cite{PapazoglouSOC2007a}.


Uma Arquitetura Orientada a a Serviços (SOA) é uma abordagem emergente que orienta os requerimentos de baixo acoplamento, baseado em padrões e uma computação
distribuída independente de protocolos~\cite{Papazoglou2007}. Na Figura~\ref{fig:soc_roadmap} mostra um roteiro de pesquisas em SOA segundo~\cite{PapazoglouSOC2007a}),
que separa a funcionalidade em três planos. Serviços básicos na base da pirâmide, composição de serviços no meio e gerenciamento de serviços
 com monitoramento no topo da pirâmide. Esta divisão lógica está baseada na necessidade de separar:

\begin{itemize}
 \item Capacidades de serviços básicos fornecidos por uma infraestrutura de \emph{middleware}, e uma SOA convencional de funcionalidades de serviços avançada
  necessária para dinamicamente compor serviços.
  \item Serviços de negócio de serviços focados em sistemas.
  \item Composição de serviços de gerenciamento de serviços.
\end{itemize}


   \begin{figure}[!h]
      \centering
      \includegraphics[width=1.0\textwidth]{figures/SOC_roadmap.png}
      \caption{Roteiro de pesquisas em SOC e SOA \cite{PapazoglouSOC2007a} }
      \label{fig:soc_roadmap}
    \end{figure}
%\end{comment}


%\begin{comment}
\subsection{Serviços Web e SOA}

Este ponto é justificado porque os serviços Web podem se tornar uma parte vital de uma arquitetura orientada a serviços.
Dentro de um processo de negócio pode ser necessário utilizar  funcionalidades de diferentes sistemas e de diferentes localizações, para realizar essas
funções se utilizam os serviços Web, estes também têm de ser identificados durante o processo de análise de uma arquitetura orientada a serviços. Cada serviço
 deve ser bem definido por uma interface (WSDL) para que possa ser publicado, localizado e invocado. Dependendo do processo de negócio, o serviço pode ser
 publicado para que outras empresas podem usá-lo, ou internamente, para uso em processos de negócio internos de uma empresa particular. 
Os serviços Web são uma tecnologia altamente adaptável às necessidades de implementação de uma arquitetura orientada a serviços. Essencialmente, os serviços
 Web são a implementação de uma especificação bem definida de uma funcionalidade, isto é, são  aplicações  modulares que fornecem uma lógica de processos
 de negócio como um serviço que pode ser publicado, localizado e invocado através da Internet~\cite{IBMWS2006}. Baseado no padrão XML~\cite{W3CXML1998}, os serviços
 Web podem ser desenvolvidos utilizando qualquer linguagem de programação, qualquer protocolo e qualquer plataforma. Os Serviços Web podem ser localizados
e utilizados a qualquer momento em qualquer localização  e usando  qualquer protocolo e plataforma. 
Mas é importante notar que os serviços Web não são a única tecnologia usada para implementar um SOA. Existem muitos exemplos de organizações que utilizam com
 sucesso SOA, no qual se utilizam (além dos serviços Web) outras tecnologias de troca de mensagens e de funções de  acesso remoto, usando o padrão XML, como o protocolo
 XML-RPC \cite{XMLRPC1999}, que funciona exatamente como o protocolo RPC (Remote Procedure Call), através de um túnel de HTTP.
%\end{comment}

%\begin{comment}
\subsection{Padrões de Desenho}
Para a construção de aplicações orientadas a serviços usando SOA, também foi desenvolvido uma série de padrões de desenho de software \cite{Gamma1994}. Com o uso
 de padrões, que podem ser usados com qualquer metodologia, o SOA resultante  irá conter um maior nível de abstração, garantindo consistência e melhor desempenho. 
Os padrões de desenho para construir uma arquitetura orientada a serviços podem ser divididos em cinco categorias \cite{Monday2003}: 


\begin{enumerate}
  \item
  \textbf{Aprendizagem}: Utilizado para compreender o ambiente dos serviços Web. Dentro desta categoria encontramos:
  \begin{itemize}
    \item Arquitetura Orientada a Serviços: O padrão que forma a arquitetura dos serviços Web.
    \item \textit{Architecture Adapter}: Ele pode ser visto como um modelo genérico que facilita a comunicação entre arquiteturas.
    \item \textit{Service Directoy}: Esse padrão facilita a transparência na localização de serviços, permitindo fazer interfaces robustas para encontrar o
      serviço que eles realmente querem.                                                                                                                                                                               
  \end{itemize}


  \item \textbf{Adaptação}: Estes padrões básicos são chamados de básicos  para conhecer o funcionamento do entorno dos serviços web. Nesta categoria encontramos:

    \begin{itemize}
      \item \textit{Bussines Object}: Um business object engloba um conceito de negócio no mundo real, como um cliente, uma empresa ou produto, e o que pretende
    este padrão é  transferir o conceito de objeto de negócios dentro do paradigma de Web Services.
      \item \textit{Business Process}: Este padrão é utilizado no tratamento de processos de negócio. Atualmente, existem duas especificações principais:
	
      \begin{itemize}
	\item Business Process Execution Language (BPEL), proposto pela BEA Systems, IBM e Microsoft.
	\item Business Process Modeling Notation (BPMN), proposto por outras empresas que não estão no primeiro grupo, tais como WebMethods, SeeBeyond, etc.	                                   
	\end{itemize}

      \item \textit{Bussines Object Collection:} Este padrão pode fazer composições de processos de negócios. 

      \item \textit{Asynchronous Business Process}: Este padrão é a evolução do padrão Business Process. 
  \end{itemize}

  \item \textbf{ Alterações}: Embora os serviços Web permitam chamadas assíncronas, a implementação do serviço pode ser baseada no passo de mensagens, também são
  importantes serviços baseados em eventos, esses padrões são baseados em padrões tradicionais, como o Observer ou o padrão Publish / Subscribe. Nesta categoria encontramos:
    \begin{itemize}
      \item \textit{Event/Monitor}: Este é um padrão para criar formas eficazes de integrar aplicações sem a interferência de outros componentes. O cenário
	mais comum de este padrão é utilizado para aplicações de EAI (Enterprise Application Integration) \cite{Gu2010}.
      \item \textit{Observer Services}: Este padrão representa a forma mais natural para detectar mudanças e agir devidamente.
      \item \textit{Publish / Subscribe Services}: A evolução do padrão Observer, enquanto o padrão Observer é baseado no registro, este padrão  é baseado
	nas notificações, o que permite diferentes serviços  possam enviar a mesma notificação. 
    \end{itemize}


  \item \textbf{Redefinição}: Esses padrões permitem acesso ao comportamento de um serviço que é implementado em uma linguagem. Eles ajudam a compreender o ambiente
  do serviços Web e para moldar o ambiente para atender às nossas necessidades. Nesta categoria encontramos:
    \begin{itemize}
      \item \textit{Physical Tires}: Este padrão ajuda a estruturar melhor a lógica de negócio dos serviços Web, e pode até mesmo ser usado para controlar
      o fluxo de negociações pode ser obtido com o padrão \textit{publish/subscribe}.
      \item \textit{Connector}: Este padrão é normalmente utilizado com o anterior para resolver quaisquer problemas que surjam na subscrição.
      \item \textit{Faux Implementation}: É uma alternativa para resolver os problemas que surgem na utilização de eventos em serviços Web. É simplesmente uma socket
      aberto, que recebe as conexões  e fornece as respostas para os diferentes eventos.                                                                                                                                                                                                                                       \end{itemize}

  \item \textbf{Flexibilidade}: Para criar serviços mais flexíveis e otimizados. Nesta categoria estão:
    \begin{itemize}
      \item \textit{Service Factory}: Um dos principais padrões e permite a seleção de serviços e fornece flexibilidade na instanciação dos componentes que criam
	os serviços Web. Esse padrão também é usado tipicamente com o padrão de Service Cache para proporcionar maior flexibilidade na manutenção de aplicações que
	utilizam os serviços Web, oferecendo um maior ROI às aplicações. 
      \item \textit{Data  Transfer  Object}: Esta norma fornece desempenho, permitindo coletar dados e enviar múltiplas em uma única chamada, reduzindo o número de conexões
	que o cliente tem que fazer para o servidor.
      \item \textit{Data  Transfer  Collection}:  Esta é uma extensão da primeira, dado que o padrão Data  Transfer  Object    pode ser aplicado a uma coleção de objetos
      de negócio. Este objeto pode retornar um conjunto de atributos comuns de uma coleção de objetos.
      \item \textit{Parcial Population}: Este padrão permite aos usuários selecionar somente os dados que são necessários para as suas necessidades e só recuperar
      do servidor aquilo que é necessário. Este padrão além de desempenho também oferece mais largura de banda na rede.                                                                                                                                                                                                                                                                   \end{itemize}

\end{enumerate}

Alguns padrões usam outros padrões, por exemplo, o padrão \textit{Business Process} utiliza o \textit{Business Object} e o \textit{Business Object Collection}. E a
 \textit{Service-Oriented Architecture} faz uso \textit{Service Directory} e \textit{Architecture Adapter}. 

%\end{comment}



%-------------------------------------------------------------------%
%--------------- Composição de Serviços ----------------------------%
%-------------------------------------------------------------------%
\section{Composição de Serviços}

A composição de serviços Web em um novo serviço %mais complexo e mais útil, mas 
é  um grande desafio. %Atualmente, existem algumas técnicas para compor serviços Web, no
 %entanto,   
Há duas formas principais de compor serviços Web: orquestrações e coreografias. O Capítulo 3 entrará em detalhes sobre cada uma dessas duas formas. Resumidamente, 
composições baseadas em orquestrações possuem uma entidade central que controla a chamada a cada um dos serviços da composição. Composições baseadas em
 coreografias são colaborativas e não possuem nenhuma entidade central como existe nas orquestrações.
%existem ainda algumas limitações. 
%Neste capítulo são descritas as normas, técnicas, modelos e linguagens presentes nas diferentes plataformas de composição de serviços Web propostas.

 
%---------------------------------------------%
%\subsection{Arquitetura Genérica}
%\label{sec:generic_architecture}

%Apresenta-se a arquitetura genérica de ~\cite{Espinoza2006} para descrever o ciclo de vida em uma composição de serviços Web. Esta estrutura não se destina a refletir a utilização de uma
 %linguagem particular, plataforma ou algoritmo de composição. O objetivo dessa arquitetura é apresentar os requisitos mínimos necessários para cobrir todo
 %o ciclo de um sistema de composição de serviços. 
A Figura~\ref{fig:genericArchitecture_WScomposition} apresenta uma arquitetura genérica para descrever o ciclo de vida em uma composição de serviços Web.
Para iniciar um processo de composição, %de serviços Web, segundo um provedor de serviços,
 deve-se descrever
e publicar um serviço (Etapa 1 da Figura~\ref{fig:genericArchitecture_WScomposition}). Em seguida deve haver uma solicitação para iniciar o processo
 de composição. O processo de definição e composição dos serviços (Etapa 2 da Figura~\ref{fig:genericArchitecture_WScomposition})
 pode invocar a tradução de uma linguagem de design para uma linguagem mais formal, que é usada pelo gerador do processo de composição (Etapa 3 da Figura
 ~\ref{fig:genericArchitecture_WScomposition}). Já que
 alguns serviços podem ter funcionalidades similares, pode ser gerado mais de um modelo de serviço de composição que atenda às requisições. Neste caso, os serviços
 compostos são avaliados (Etapa 4 da Figura~\ref{fig:genericArchitecture_WScomposition}), %com informações fornecidas pelos atributos não-funcionais,
 e finalmente o serviço composto escolhido é executado  e monitorado (Etapa 5 da Figura~\ref{fig:genericArchitecture_WScomposition}).

  \begin{figure}[!h]
      \centering
      \includegraphics[width=1.0\textwidth]{figures/genericArchitecture_WScomposition2.png}
      \caption{Arquitetura genérica para um sistema de composição de serviços Web~\cite{Espinoza2006}}%%melhorar imagem e referenciar a imagem melhorada
      \label{fig:genericArchitecture_WScomposition}
  \end{figure}	


%A idéia de partir de uma estrutura genérica para analisar o estado da arte da composição de serviços não é nova (\cite{Srivastava2003a} e \cite{Rao2004}). Em
% outros trabalhos também são realizados  estudos de diferentes  estratégias de composição (\cite{Chakraborty2001},\cite{Benatallah2005} e \cite{Milanovic2004}),
% mas em \cite{Espinoza2006} ao contrário dos anteriores cobre o ciclo de vida inteiro. 
%Para cada uma das  fases da arquitetura na figura ~\ref{fig:genericArchitecture_WScomposition}, extraem-se um conjunto de parâmetros, técnicas, modelos e linguagens. Os
 %parâmetros podem ser usados como um mecanismo de  comparação para avaliar soluções diferentes para a composição de serviços Web.

%As seções a seguir identificam uma série de parâmetros, técnicas, modelos e linguagens com as quais é possível gerenciar  o ciclo de vida 
%inteiro de uma ferramenta  específica para a composição de serviços Web.


%---------------------------------------------%
\begin{comment}
\subsection{Descrição e Modelagem de Serviços}
\label{sec:service_modeling_description}

Usando a tecnologia atual, um provedor de serviços pode implementar e expor uma interface de serviço usando  WSDL. A
 descrição
 WSDL de um serviço contém uma especificação de operações que o serviço expõe e enlaces de informações que detalham como invocar as operações em termos de protocolos
 e endereços. Embora este nível de detalhe é suficiente para construir aplicações de serviços Web simples, isto não é suficiente quando se precisa criar serviços
complexos e  raciocinar sobre sua composição~\cite{Berardi2008}. WSDL não é a única maneira de descrever um serviço, devido ao grande número de linguagens que estão sendo
propostos como padrão por diferentes grupos de pesquisa e indústria.
\end{comment}


%---------------------------------------------%
%\subsection{Desenho e Definição da Composição de Serviços}
%\label{sec:service_composition_design_definition}

%Na arquitetura genérica da Figura \ref{fig:genericArchitecture_WScomposition}, nota-se que uma solicitação externa feita por um cliente do serviço
 %é necessária para iniciar o processo
 %de composição, o que faz sentido quando a aplicação não pode ser implementada por um serviço simples pré-existente. %, senão  pela combinação adequada de alguns
 %serviços disponíveis.

A maioria das ferramentas que apoiam o projeto e definição da composição de serviços fazem uma distinção entre linguagens de especificação de serviços
internas e externas. As linguagens externas (também chamadas de linguagens de design) permitem representar, geralmente em forma gráfica, a composição de
serviços para que ela possa ser facilmente compreendida pelos interessados. Por outro lado, as linguagens internas (linguagens de composição de serviços) são
linguagens geralmente mais precisas e formais, que são usados para gerar o processo de composição. %Algumas ferramentas podem apoiar a tradução de um desenho
%de serviço composto em uma linguagem de descrição.


%\subsubsection{Linguagens de Composição de Serviços Web}
%Algumas características de linguagem que ajudam a descrever a composição de serviços  são ~\cite{Espinoza2006}:
A lista a seguir apresenta algumas linguagens externas: %que auxiliam na especificação de composição de serviços:

\begin{itemize}
  \item \textbf{WS-BPEL}: É uma linguagem com uma sintaxe baseada em XML que suporta a especificação de processos de negócio, que por sua vez 
utilizam operações que envolvem um ou vários serviços Web. BPEL (nome curto do WS-BPEL) suporta a descrição de dois tipos de processos: abstrato e executável. A 
linguagem
 utiliza os conceitos desenvolvidos na área de gestão de fluxos de trabalho (\textit{workflows}) e  é relativamente expressiva, em comparação a algumas
 linguagens suportadas por sistemas de fluxos de trabalho existentes e padrões relacionados.

 \item\textbf{ebXML BPSS}: \textit{Electronic Business XML}, é um conjunto de padrões com o objetivo de fornecer uma plataforma de implementação para a 
colaboração  entre
 negócios. ebXML adota uma proposta baseada na coreografia para a composição de serviços. Especificamente, uma colaboração de negócios é descrita como um conjunto
 de Perfis de Protocolos de Colaboração (CPP).

  \item \textbf{BPML\footnote{BPML: Atualmente é BPMN}}: O BPMi (\emph{Business Process Management Initiative}) é um consórcio que tem como objetivo
 contribuir no desenvolvimento de padrões de descrição
 de processos. Esse consórcio tem publicado uma especificação para uma linguagem de descrição de processos chamada de BPML (\emph{Business Process Modeling Language}), que
 é similar em algumas formas a WS-BPEL, e está voltada para a descrição de orquestrações de serviços Web. BPML se beneficia de um padrão prévio chamado de WSCI desenvolvido
 pelos interessados em BPMi. Embora descontinuada, a WSCI integra alguns dos modelos encontrados no BPML e BPEL (por exemplo, a sequência, a execução paralela e as
 primitivas para enviar/receber) e é usada também para descrever  coreografias de serviços Web.
\end{itemize}

%\subsubsection{Linguagens Formais de Composição de Serviços Web}
As linguagens %de descrição de  composição de serviços 
externas possuem  limitações para o projeto e análise de uma composição de serviços, por exemplo, para
 permitir  técnicas de simulação, e para garantir a verificação de propriedades como segurança, gerenciamento de recursos %ou de verificação de consistência  de dados, 
 e satisfação das restrições de negócio. Por causa disso, alguns grupos de pesquisa têm proposto algumas  linguagens formais de composição de serviços.
 %para atender essas necessidades. 
  A seguir, descrevem-se algumas das linguagens formais para compor serviços Web, ou seja, linguagens internas.

\begin{itemize}
  \item \textbf{OWL-S\footnote{OWLS foi anteriormente conhecido como DAML-S}}: É uma ontologia de serviços que permite a descoberta, invocação,
composição, inter-operação e monitoramento da execução de maneira  automática. OWL-S modela os serviços utilizando uma ontologia, que consiste em três
 partes: (1) \textit{service profile}: descreve aquilo que o serviço requer dos usuários, (2) \textit{service model}: especifica como funciona o serviço, e
(3) \textit{service  grounding}: oferece informações sobre como usar o serviço.

%O modelo de processos é uma subclasse do \textit{service model}, que descreve um serviço
%em termos de entradas, saídas, pré-condições, pós-condições e, se necessário, seus sub-processos. OWL-S possui três tipos de processos: "atômicos", os quais
%não possuem "sub-processos" simples, os quais não podem ser invocados diretamente e são utilizados como elementos de abstração para processos atômicos ou compostos
%e "compostos", que consistem de sub-processos. Para fornecer uma base formal para a sua interação com o mundo real, OWL-S está baseado no cálculo de
%situações , que é um formalismo baseado em lógica que modela explicitamente o fato de que ao longo do tempo, diferentes "situações" podem surgir.

  \item \textbf{Componentes Web}: Esta proposta trata os serviços como componentes para dar suporte a princípios básicos de desenvolvimento de software,
 tais como reutilização, especialização e extensão. A ideia principal é encapsular a lógica de informação composta dentro de uma definição de classe, o que
representa um componente Web. A interface pública de um componente Web pode então ser publicada e utilizada para a descoberta e reutilização.

  \item \textbf{Álgebra de  Processos }: Tem como meta introduzir descrições muito mais simples do que outras
 propostas, e modelar os serviços  como processos móveis para garantir a verificação de propriedades, tais como segurança e gerenciamento de recursos. A teoria
 de processos móveis está baseada no \textit{Pi-Calculus}, no qual a entidade básica é o processo, que pode ser um processo vazio, ou uma escolha entre várias operações
de entrada/saí­da, uma composição paralela, uma definição recursiva ou uma invocação recursiva.

  \item \textbf{Redes de Petri}: As Redes de Petri são uma proposta de modelagem de processos bem estabelecida. Uma rede de Petri é um grafo orientado,
conectado e bipartido, no qual os nós representam localizações e transições, e existem \textit{tokens} que ocupam os estados. %Quando existe pelo menos um \textit{token} em
 %cada localização conectada a uma transição, esta transição é sensibilizada e habilitada.
 Os serviços podem ser modelados como redes de Petri, atribuindo
 transições  para métodos e localizações   para os estados. Cada serviço tem uma rede de Petri atribuída que descreve o comportamento e possui 
  uma localização de entrada e uma de saída. %A qualquer momento, um serviço pode estar em um dos seguintes estados: não instanciado, pronto, em execução,
 %suspenso, ou finalizado.

 \item \textbf{Inspeção de Modelos}: Uma inspeção de modelos é usada para verificar formalmente sistemas concorrentes de estado finito. A especificação do sistema
 é descrita usando lógica temporal, e para saber se a especificação é correta, realiza-se  um teste no modelo. Pode-se aplicar a inspeção de modelos para a
composição de serviços Web, verificando a corretude da especificação dos serviços. Dentre as propriedades que podem ser verificadas estão a consistência
 dos dados e a satisfação de restrições de negócio.

  \item \textbf{\textit{Roman Model} (Ações com modelo de processos baseado em autômatos)}: Com esta proposta, os serviços são modelados de uma forma mais 
 abstrata, baseada na noção de atividades. Basicamente, há um alfabeto (finito) de nomes de atividades, mas não é modelada a estrutura interna (entradas, saídas
ou interação com o mundo). 
%Em [20] se especifica o fluxo do processos internos de um serviço Web através de sistemas de transição. No caso mais geral, %são potencialmente árvores infinitos, onde cada ramo corresponde a uma sequência de execução de atividades permitidas.

 \item\textbf{Máquinas de Mealy (máquinas de estado finito)}: São máquinas de estado finito com entradas e saídas. Os serviços se comunicam através do
envio de mensagens  assíncronas, onde cada serviço tem uma fila. Um ``observador'' global faz acompanhamento de todas as mensagens. A conversa é vista como
 uma sequência de mensagens. %Entendendo as propriedades de conversação, este método fornece novas ferramentas para desenhar e analisar a composição de serviços
  %de maneira  ``bem estruturada''. 
 %A composição automática de serviços é o objetivo da plataforma apresentada em [18], que descreve o comportamento de serviços % Web como uma árvore de execução e, em seguida, a converte em uma máquina de estado finito. Eles propõem um algoritmo que %comprova a existência da composição e retorna uma se existe uma.
\end{itemize}


\begin{comment}
\subsubsection{Modelo de Compatibilidade}
Uma questão fundamental na definição de um serviço composto é saber se os seus serviços componentes podem formar parte uma composição \cite{Dustdar2005a}. Por exemplo,
 pode ser difícil invocar uma operação, se não há uma correspondência entre os parâmetros necessários para a operação (por exemplo, tipos de dados, o número de
 parâmetros) e os dados transmitidos pelo serviço do cliente. A seguir, identifica-se que pelo menos é possível verificar a compatibilidade  dos serviços em dois níveis \cite{Dustdar2005a}: %revisar esta ultima referencia

  \begin{itemize}
  \item \textbf{Sintaxe}: Em um nível sintático, a comparação é bem simples e podem ser feitas em:
  (1) modo de operação e (2) enlaces, o que permite uma comparação dos protocolos de enlace dos serviços que interagem.

%melhorar bib en lugar de espinoza
  \item \textbf{Semântica}: Em um nível semântico a comparação é muito mais complexa e, entre outras coisas, as regras semânticas podem
incluir: (1) mensagens, levando em conta o número de parâmetros das mensagens, os seus tipos de dados, papéis  de negócios e unidades. (2)
 Operações semânticas, esta regra garante que as operações que estão interligadas tenham categorias e propósitos  "compatíveis". (3) Propriedades
 qualitativas, os mecanismos de composição geralmente têm preferências em relação à  qualidade das operações que pretendem terceirizar. As regras
qualitativas comprovam as propriedades qualitativas das operações que interagem, e (4) validade da composição, que verifica se uma determinada
combinação de serviços de uma maneira específica é válida e se também agregam valor. A última regra é verificada no nível de composição, enquanto
 que as anteriores regras semânticas  tratam a compatibilidade no nível dos serviços e operações.
  %Em outro estudo do mesmo autor se estende o
%modelo proposto em \cite{Medjahed2003} e são  introduzidos os conceitos de ``grau de compatibilidade'' e PI - compatibilidade  %para atender a compatibilidade total
%e parcial. Mais detalhes desta proposta podem ser encontrados em \cite{Medjahed2005}.
  \end{itemize}


\begin{comment}
\subsubsection{Confiabilidade da Composição }
\label{subsec:composition_reliability}
Há uma grande diversidade de pesquisas nessa área, porém não há uma definição clara de confiabilidade que estabeleça seu escopo no contexto de um serviço
 Web composto. Em \cite{Fu2002}, por exemplo, é proposta uma definição de confiabilidade que leva em consideração vários aspectos que afetam a confiabilidade de um
 serviço Web composto durante sua composição e execução. Nesta seção descrevem-se os aspectos relacionados com a confiabilidade de um serviço Web composto
 durante a fase de composição (antes da execução do serviço composto). Após serão descritos os aspectos de confiabilidade que são considerados durante a
execução do serviço.


  \begin{itemize}
    \item \textbf{Verificação da Especificação do Serviço  Composto:} Este aspecto requer que a notação para especificar a composição dos serviços Web
  seja correta e que a especificação dos serviços compostos, quando este é executado, traduza corretamente o fluxo do processo que representa. Uma possível
  solução para essa atividade é descrita em \cite{Berardi2008}, que utiliza um modelo de técnicas de controle para verificar a especificação criada de acordo com um padrão
  de composição de serviços Web específico.

    \ item \textbf{Acordo entre a Especificação do Serviço Composto e a Especificação dos serviços individuais:}  É preciso a existência de um acordo entre os
  requerimentos do fluxo do processo representados pelo serviço composto e as restrições previstas pelos serviços Web componentes. Existem alguns
  esforços que permitem que os serviços Web especifiquem suas políticas respeito à  participação em um serviço composto [\cite{Medjahed2003}-\cite{Sivashanmugam2005}].%revisar el rango [10-12]

    \item  \textbf{Suporte a mudanças na definição de Interfaces}: Dada a natureza autônoma dos provedores de serviços, é possível que um provedor
  possa alterar a interface de um serviço que faz parte de um serviço Web composto, e isto não deveria causar uma falha no processo representado
  pelo serviço composto ou levar a erros inesperados. Uma solução é construir uma camada de funcionalidade sobre a pilha de padrões de composição,
  como é descrito em \cite{Kumaran2002}. Esta proposta utiliza um modelo de conversação entre os serviços da Web para gerenciar as mudanças nas
  interfaces nos serviços individuais.
  \end{itemize}
\end{comment}

%\subsection{Tecnologias e Padrões}
%\subsubsection{Enterprise Service Bus (ESB)}


%\subsection{Gerencia de Processos de Negócios (BPM)}


%\subsection{Business Process Execution Language (BPEL)}

%\section{Segurança nos Serviços Web}
%\subsection{No Nível de Transporte}
%\subsection{No Nível da Aplicação}
%\subsection{Padrões}

%% Semantic web Services
%% Wireless Web Services
%% Virtual Web Services
%%Ubiquitous Web Services

\section{Internet do Futuro: A Internet das Coisas}
Atualmente, a  maioria de conexões à Internet no mundo  são realizadas por dispositivos utilizados directamente por pessoas, tais como o
computadores e telefones celulares. A principal forma de comunicação  é de humano a humano. Em um futuro não muito distante, todos os objetos
estarão conectados. As ``coisas'' poderão trocar informações por si mesmas e o número de ``coisas'' conectadas à Internet será muito maior 
do que o número de ``pessoas'',  e os humanos podem tornar-se a minoria como  geradores e receptores de tráfego. 
O mundo físico  e o mundo da informação se juntarão e misturarão~\cite{Tan2010}. 

O futuro não será de pessoas falando com pessoas,e nem de pessoas acessando à informação. O futuro será usar máquinas
para se comunicarem com outras máquinas em nome de pessoas. Nós estamos entrando em uma nova era de computação ubiqua, estamos entrando na era
 da ``Internet das Coisas'' (IoT) em que serão realizadas novas formas de comunicação entre pessoas e coisas, e entre coisas entre si. Assim, 
uma nova dimensão é adicionada ao mundo das tecnologias de informação e comunicação: a qualquer momento,  qualquer lugar de conexão para
 qualquer um,  e conectividade para qualquer coisa~\cite{Tan2010}. A Figura~\ref{fig:IoT_newDimension} mostra essa nova dimensão.

   \begin{figure}[!h]
      \centering
      \includegraphics[width=0.6\textwidth]{figures/IoT-newDimension.png}
      \caption{Uma nova dimensão nas tecnologias de Informação~\cite{PapazoglouSOC2007a} }
      \label{fig:IoT_newDimension}
    \end{figure}


Não há nenhum padrão para definir a ``Internet das Coisas''. Considerando a funcionalidade e a identidade como  central,
a IoT pode ser definida como ``Coisas que possuim identidades e personalidades virtuais desempenhando-se  em espaços inteligentes utilizando
interfaces inteligentes para se conectarem e  comunicarem dentro de contextos de tipo social, de entorno e de usuário". Uma diferente
definição com  foco na integração poderia ser formulada como ''Objetos interconectados com um papel ativo no que pode ser
 chamado de ``Internet do Futuro'' ''~\cite{Tan2010}.
Do ponto de vista conceitual, a ``Internet das coisas'' baseia-se em três pilares que estão relacionados com a  capacidade dos objetos
 inteligentes para: (i) ser identificáveis (toda coisa se identifica por si mesma), (ii) para se comunicar (toda coisa se comunica) e
 (iii) para interagir (toda coisa interage), construindo redes de objetos interconectados, ou com  usuários finais ou outras entidades na
rede~\cite{Miorandi2012}. 


De uma perspectiva de nível de serviço, a questão principal tem a ver o como integrar (ou compor) as funcionalidades e/ou 
recursos fornecidos por objetos inteligentes (em muitos casos em formas de fluxos de dados gerados) dentro de serviços.
Isto requer a definição de: (i) arquitecturas e métodos para ``para virtualizar'' objetos  criando um padrão para representar
  objetos inteligentes no domínio digital, capaz de ocultar a heterogeneidade dos dispositivos/recursos e (ii)
métodos para a integração e composição contínua de recursos/serviços de objetos inteligentes em serviços de valor agregado
para usuários finais~\cite{Miorandi2012}.

\subsection{Tecnologias e Tendências}
%Dentro desta perspectiva, o termo ``Internet das Coisas'' (IoT) é amplamente utilizado para se referir a: (1) o resultado de interconectar
A ``Internet das Coisas'' é amplamente utilizado para se referir a: (1) o resultado de interconectar
objetos inteligentes em uma rede global  por meio de tecnologias de Internet estendidas, (2) o conjunto de tecnologias de
suporte necessárias para concretizar essa visão (incluindo, por exemplo, RFID~\footnote{RFID: Identificação por radiofrequência do
 inglês ``Radio-Frequency IDentification''}, sensores/atuadores, dispositivos de comunicação máquina a máquina, etc) e 
(3) de conjuntos de aplicações e serviços, aproveitando essas tecnologias para abrir novos negócios e 
oportunidades de mercado~\cite{Miorandi2012}.
  

A partir de uma perspectiva de comprimento, a tendência de desenvolvimento da ``Internet das Coisas'' inclui três etapas:  inteligência
embarcada, conectividade e interação. Atualmente, existe inteligência embarcada em diversos dispositivos e domínios (sistemas de vôo,
domésticos para casa, sistemas de misseis, entre outros ) que podem atuar  automáticamente. Porém, apesar de esses dispositivos sejam
 inteligentes, eles só trabalham sozinhos e localmente, e não há nada relacionado com a ``rede''.

Dessa maneira, o próximo passo seria conectar ou comunicar esses dispositivos inteligentes. No entanto, do ponto de vista de dispositivos
inteligentes conectados, esses dispositivos não são inteligentes porque são apenas dotados com recursos de agentes e todas as ações
 são pré-concebidas por humanos, eles são inteligentes porque eles estão conectados.
As ``coisas'' podem ser conectadas com fio ou sem fio. Na Internet das Coisas, a conexão sem fio será a principal maneira. Com base 
na infra-estrutura existente, há muitas maneiras de conectar uma ``coisa'': RFID, ZigBee, WPAN, WSN, DSL, UMTS, GPRS,
WiFi, WiMax, LAN, WAN, 3G, etc. Conectar  coisas inteligentes torna possível a interação.


Mesmo que possa se conectar qualquer ``coisa'', não significa que as coisas possam se comunicar por si mesmas. Assim, novas ``coisas''
 inteligentes devem ser criadas, as quais  podem processar informação, se auto-configurar, se auto-manter, se auto-reparar,
 fazer decisões independentes e, eventualmente, desempenhar um papel ativo na sua própria remoção. As coisas podem interagir, trocar
 informações por elas mesmas. Assim, a forma de comunicação irá mudar de humano-humano para a coisa-humana e  coisa-coisa.  Novos
 aplicativos de negócios deveriam ser criados e podem melhorar a inovação e desenvolvimento da Internet das Coisas. A
 Figura~\ref{fig:IoT_trends}  mostra uma tendência de desenvolvimento aproximada da Internet de Coisas].

   \begin{figure}[!h]
      \centering
      \includegraphics[width=0.6\textwidth]{figures/IoT-trends.png}
      \caption{Tendências no Internet do Futuro~\cite{Tan2010} }
      \label{fig:IoT_trends}
    \end{figure}


